# -*- coding: utf-8 -*-
"""student_employability_app_final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-3dqWEVtZ9vWPIW7UxmFxQEr8itV66I
"""

# advanced_employability_app_final.py

import streamlit as st
import pandas as pd
import joblib
import numpy as np

# Load the trained model and scaler
try:
    model = joblib.load('employability_predictor.pkl')
    scaler = joblib.load('scaler.pkl')
except FileNotFoundError:
    st.error("Error: Model or scaler files not found. Please ensure 'employability_predictor.pkl' and 'scaler.pkl' are in the same directory.")
    st.stop() # Stop the app if files are not found

# Define the expected feature names based on your training data
# This is crucial for ensuring the input data matches the model's expectations
# You can get these from X.columns after data preprocessing in your notebook
expected_features = [
    'CGPA', 'PROJECTS', 'INTERNSHIPS', 'WORKSHOPS', 'CERTIFICATIONS',
    'AWARDS', 'SCHOLARSHIPS', 'EXTRACURRICULAR', 'SOFT_SKILLS',
    'APTITUDE_TEST_SCORE', 'COMMUNICATION_SKILLS', 'PROBLEM_SOLVING_SKILLS',
    'LEADERSHIP_SKILLS', 'TEAMWORK_SKILLS', 'CRITICAL_THINKING_SKILLS',
    'ADAPTABILITY_SKILLS', 'TIME_MANAGEMENT_SKILLS', 'ENTREPRENEURSHIP_SKILLS',
    'RESEARCH_SKILLS', 'PRESENTATION_SKILLS', 'NETWORKING_SKILLS',
    'STUDENT_PERFORMANCE_RATING'
]

# --- Streamlit App Layout ---

st.set_page_config(
    page_title="Student Employability Predictor",
    page_icon="üéì",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Custom CSS for a professional look
st.markdown("""
    <style>
    .main-header {
        font-size: 3em;
        color: #2E86C1;
        text-align: center;
        margin-bottom: 0.5em;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.5em;
        color: #34495E;
        text-align: center;
        margin-bottom: 1.5em;
    }
    .stButton>button {
        background-color: #28B463;
        color: white;
        font-size: 1.2em;
        padding: 0.8em 1.5em;
        border-radius: 0.5em;
        border: none;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #239B56;
    }
    .stTextInput>div>div>input {
        border-radius: 0.5em;
        border: 1px solid #D5DBDB;
        padding: 0.5em;
    }
    .stSelectbox>div>div {
        border-radius: 0.5em;
        border: 1px solid #D5DBDB;
        padding: 0.3em;
    }
    .stSlider>div>div>div>div {
        background-color: #2E86C1;
    }
    .prediction-box {
        background-color: #EBF5FB;
        border-left: 8px solid #2E86C1;
        padding: 1.5em;
        border-radius: 0.8em;
        margin-top: 2em;
        text-align: center;
        font-size: 1.8em;
        font-weight: bold;
        color: #2E86C1;
    }
    .prediction-box.employable {
        border-left-color: #28B463;
        color: #28B463;
        background-color: #E8F8F5;
    }
    .prediction-box.less-employable {
        border-left-color: #E74C3C;
        color: #E74C3C;
        background-color: #FDEDEC;
    }
    .stAlert {
        border-radius: 0.5em;
    }
    .footer-info {
        font-size: 0.85em;
        color: #7F8C8D;
        text-align: center;
        margin-top: 3em;
    }
    </style>
    """, unsafe_allow_html=True)

st.markdown('<p class="main-header">üéì Student Employability Predictor</p>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">Predicting student employability based on various academic and skill metrics.</p>', unsafe_allow_html=True)

st.write("---")

# --- Input Features ---
st.header("Student Profile Input")

# Using columns for better layout
col1, col2 = st.columns(2)

with col1:
    st.subheader("Academic & Project Details")
    cgpa = st.slider("CGPA (Cumulative Grade Point Average)", 0.0, 10.0, 7.5, 0.1)
    projects = st.slider("Number of Projects Completed", 0, 10, 3)
    internships = st.slider("Number of Internships", 0, 5, 1)
    workshops = st.slider("Number of Workshops Attended", 0, 10, 2)
    certifications = st.slider("Number of Certifications", 0, 10, 2)
    awards = st.slider("Number of Awards/Honors", 0, 5, 0)
    scholarships = st.slider("Number of Scholarships Received", 0, 3, 0)
    extracurricular = st.slider("Number of Extracurricular Activities", 0, 10, 3)
    student_performance_rating = st.slider("Student Performance Rating (1-5)", 1, 5, 3)

with col2:
    st.subheader("Skill Assessment")
    # Likert scale for skills (1-5)
    soft_skills = st.slider("Soft Skills Rating (1-5)", 1, 5, 3)
    aptitude_test_score = st.slider("Aptitude Test Score (0-100)", 0, 100, 60)
    communication_skills = st.slider("Communication Skills Rating (1-5)", 1, 5, 3)
    problem_solving_skills = st.slider("Problem Solving Skills Rating (1-5)", 1, 5, 3)
    leadership_skills = st.slider("Leadership Skills Rating (1-5)", 1, 5, 3)
    teamwork_skills = st.slider("Teamwork Skills Rating (1-5)", 1, 5, 3)
    critical_thinking_skills = st.slider("Critical Thinking Skills Rating (1-5)", 1, 5, 3)
    adaptability_skills = st.slider("Adaptability Skills Rating (1-5)", 1, 5, 3)
    time_management_skills = st.slider("Time Management Skills Rating (1-5)", 1, 5, 3)
    entrepreneurship_skills = st.slider("Entrepreneurship Skills Rating (1-5)", 1, 5, 3)
    research_skills = st.slider("Research Skills Rating (1-5)", 1, 5, 3)
    presentation_skills = st.slider("Presentation Skills Rating (1-5)", 1, 5, 3)
    networking_skills = st.slider("Networking Skills Rating (1-5)", 1, 5, 3)

st.write("---")

# --- Prediction Button ---
if st.button("Predict Employability"):
    # Create a DataFrame from the input values
    input_data = pd.DataFrame([[
        cgpa, projects, internships, workshops, certifications, awards,
        scholarships, extracurricular, soft_skills, aptitude_test_score,
        communication_skills, problem_solving_skills, leadership_skills,
        teamwork_skills, critical_thinking_skills, adaptability_skills,
        time_management_skills, entrepreneurship_skills, research_skills,
        presentation_skills, networking_skills, student_performance_rating
    ]], columns=expected_features)

    # Scale the input data
    # Ensure the scaler is fitted on the same features as the model was trained on
    try:
        scaled_input = scaler.transform(input_data)
    except Exception as e:
        st.error(f"Error during scaling: {e}. This might happen if the number of input features does not match the scaler's expected features.")
        st.stop()

    # Make prediction
    prediction = model.predict(scaled_input)
    prediction_proba = model.predict_proba(scaled_input)

    employable_proba = prediction_proba[0][1] # Probability of being Employable (CLASS=1)
    less_employable_proba = prediction_proba[0][0] # Probability of being Less Employable (CLASS=0)

    st.subheader("Prediction Result:")
    if prediction[0] == 1:
        st.markdown(f"""
            <div class="prediction-box employable">
                Employable! üéâ
            </div>
            <p style='text-align: center; margin-top: 1em; font-size: 1.1em;'>
                Probability of being Employable: <strong>{employable_proba:.2%}</strong>
            </p>
            """, unsafe_allow_html=True)
        st.balloons()
    else:
        st.markdown(f"""
            <div class="prediction-box less-employable">
                Less Employable üôÅ
            </div>
            <p style='text-align: center; margin-top: 1em; font-size: 1.1em;'>
                Probability of being Less Employable: <strong>{less_employable_proba:.2%}</strong>
            </p>
            """, unsafe_allow_html=True)
        st.warning("Consider focusing on skill development and academic performance to improve employability.")

st.write("---")
st.info("This prediction is based on a machine learning model and should be used as a guide. Actual employability depends on many factors.")

# Optional: Add a section to explain the features or model
with st.expander("About This Predictor"):
    st.write("""
        This application uses a machine learning model (specifically, an SVM model)
        trained on a dataset of student academic records and skill assessments to predict
        their employability status (Employable or Less Employable).

        **Key Features Used for Prediction:**
        - **Academic Performance:** CGPA, Student Performance Rating.
        - **Experience & Achievements:** Projects, Internships, Workshops, Certifications, Awards, Scholarships, Extracurricular activities.
        - **Skills:** Soft Skills, Aptitude Test Score, Communication, Problem Solving, Leadership, Teamwork, Critical Thinking, Adaptability, Time Management, Entrepreneurship, Research, Presentation, and Networking Skills.

        The model was trained using a GridSearchCV approach to find the best hyperparameters
        and SMOTE for handling class imbalance.
    """)

# --- Footer Information ---
st.markdown("""
    <div class="footer-info">
        Version 1.0 | Last updated: Aug-2025 | Developed by Mr.CHOONG MUH IN (TP068331)
    </div>
    """, unsafe_allow_html=True)
st.caption("¬© 2025 CHOONG MUH IN / APU University | Graduate Employability Prediction App | For research purposes only.")
